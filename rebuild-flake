#!/bin/sh
# NixOS rebuild script using flakes
# Automatically uses the current hostname as the system name

# Get current hostname to use with flake
HOSTNAME=$(hostname)
SYSTEM_ARG=${1:-$HOSTNAME}

# Map hostnames to directory names
get_system_dir() {
  case "$1" in
    "nixt460") echo "t460" ;;
    "nixhq") echo "hq" ;;
    "nixt15g") echo "t15g" ;;
    *) echo "$1" ;;  # Default to the name itself
  esac
}

SYSTEM_DIR=$(get_system_dir "$SYSTEM_ARG")
LOG_FILE="${SYSTEM_DIR}/rebuild.log"

# Create log header (overwrite previous log)
echo "--- Rebuild started at $(date) for $SYSTEM_ARG ---" > "$LOG_FILE"

# Function to run commands with output to both console and log
run_cmd() {
  echo "Running: $1" | tee -a "$LOG_FILE"
  eval "$1" 2>&1 | tee -a "$LOG_FILE"
  return ${PIPESTATUS[0]}
}

# Update flatpak packages
run_cmd "flatpak update -y"

# Update flake inputs (replaces nix-channel --update)
# Source secrets.env if it exists (for GitHub tokens, etc.)
if [ -f ~/.config/nixos/secrets.env ]; then
  source ~/.config/nixos/secrets.env
fi
run_cmd "nix flake update"

# Clean up old generations
run_cmd "sudo nix-env --delete-generations 60d"
run_cmd "sudo nix-collect-garbage --delete-older-than 60d"

# Rebuild the system using flakes
echo "Building system configuration for $SYSTEM_ARG..." | tee -a "$LOG_FILE"
run_cmd "sudo nixos-rebuild switch --flake \".#$SYSTEM_ARG\""
retval=$?

if [ $retval -eq 0 ]; then
  echo "Build successful! Committing changes..." | tee -a "$LOG_FILE"
  
  # Pull any remote changes first
  run_cmd "git pull"
  
  # Get current generation number
  gennbr="$(sudo nix-env --list-generations -p /nix/var/nix/profiles/system | grep current | awk '{print $1}')"
  
  # Commit and push changes
  msg="$SYSTEM_ARG: generation $gennbr"
  run_cmd "git add ."
  run_cmd "git commit -m \"$msg\""
  run_cmd "git push"
  
  echo "--- Rebuild completed successfully at $(date) ---" | tee -a "$LOG_FILE"
else
  echo "Build failed with error code $retval" | tee -a "$LOG_FILE"
  echo "--- Rebuild failed at $(date) ---" | tee -a "$LOG_FILE"
fi

echo "Log saved to $LOG_FILE"
